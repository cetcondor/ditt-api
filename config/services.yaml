# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Migrations/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags:
            - controller.service_arguments

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    GuzzleHttp\Client:
        class: GuzzleHttp\Client

    Welp\IcalBundle\Factory\Factory:
        alias: 'welp_ical.factory'

    App\Security\User\UserChecker:
        class: App\Security\User\UserChecker

    app.security.voter.resource:
        class: App\Security\ResourceVoter
        public: false
        tags: [ { name: security.voter } ]

    # API Filters

    app.search_filter.work_month:
        parent:    'api_platform.doctrine.orm.date_filter'
        arguments:
            -
                $year: ~
                $month: ~
                $user: ~
        tags:
            $name: 'api_platform.filter'
            $id: 'search_filter.work_month'
        autowire: false
        autoconfigure: false
        public: false

    # API Order filters

    app.order_filter.supervised_user:
        parent:    'api_platform.doctrine.orm.order_filter'
        arguments: [ { firstName: ~, lastName: ~ } ]
        tags:      [ { name: 'api_platform.filter', id: 'order_filter.supervised_user' } ]
        autowire: false
        autoconfigure: false
        public: false

    app.order_filter.user:
        parent:    'api_platform.doctrine.orm.order_filter'
        arguments: [ { firstName: ~, lastName: ~, supervisor.firstName: ~, supervisor.lastName: ~ } ]
        tags:      [ { name: 'api_platform.filter', id: 'order_filter.user' } ]
        autowire: false
        autoconfigure: false
        public: false

    # Commands

    App\Command\NotificationsCommand:
        class: App\Command\NotificationsCommand
        arguments:
            $clientSpecialApprovalsUrl: '%env(CLIENT_SPECIAL_APPROVALS_URL)%'
            $mailSenderAddress: '%env(MAILER_EMAIL)%'

    # Event listeners

    app.event.jwt_created_listener:
        class: App\Listener\JWTCreatedListener
        tags:
            -
                name: kernel.event_listener
                event: lexik_jwt_authentication.on_jwt_created
                method: onJWTCreated

    App\Listener\ChangesNotificationListener:
        class: App\Listener\ChangesNotificationListener
        arguments:
            $mailSenderAddress: '%env(MAILER_EMAIL)%'
            $clientNewPasswordUrl: '%env(CLIENT_NEW_PASSWORD_URL)%'
        tags:
            - name: kernel.event_listener
              event: !php/const App\Event\UserChangedEvent::CHANGED
              method: onUserChangedEvent
            - name: kernel.event_listener
              event: !php/const App\Event\WorkMonthWorkTimeCorrectionChangedEvent::WORK_TIME_CORRECTION_CHANGED
              method: onWorkMonthWorkTimeCorrectionChangedEvent

    App\Listener\UserPasswordResetEmailNotificationListener:
        class: App\Listener\UserPasswordResetEmailNotificationListener
        arguments:
            $mailSenderAddress: '%env(MAILER_EMAIL)%'
            $clientNewPasswordUrl: '%env(CLIENT_NEW_PASSWORD_URL)%'
        tags:
            - name: kernel.event_listener
              event: !php/const App\Event\UserPasswordResetEvent::RESET
              method: onReset

    App\Listener\WorkLogEmailNotificationListener:
        class: App\Listener\WorkLogEmailNotificationListener
        arguments:
            $mailSenderAddress: '%env(MAILER_EMAIL)%'
        tags:
            - name: kernel.event_listener
              event: !php/const App\Event\BusinessTripWorkLogApprovedEvent::EVENT
              method: onBusinessTripWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\BusinessTripWorkLogCanceledEvent::EVENT
              method: onBusinessTripWorkLogCanceled
            - name: kernel.event_listener
              event: !php/const App\Event\BusinessTripWorkLogRejectedEvent::EVENT
              method: onBusinessTripWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\HomeOfficeWorkLogApprovedEvent::EVENT
              method: onHomeOfficeWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\HomeOfficeWorkLogCanceledEvent::EVENT
              method: onHomeOfficeWorkLogCanceled
            - name: kernel.event_listener
              event: !php/const App\Event\HomeOfficeWorkLogRejectedEvent::EVENT
              method: onHomeOfficeWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleBusinessTripWorkLogApprovedEvent::EVENT
              method: onMultipleBusinessTripWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleBusinessTripWorkLogRejectedEvent::EVENT
              method: onMultipleBusinessTripWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleHomeOfficeWorkLogApprovedEvent::EVENT
              method: onMultipleHomeOfficeWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleHomeOfficeWorkLogRejectedEvent::EVENT
              method: onMultipleHomeOfficeWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleOvertimeWorkLogApprovedEvent::EVENT
              method: onMultipleOvertimeWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleOvertimeWorkLogRejectedEvent::EVENT
              method: onMultipleOvertimeWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleSpecialLeaveWorkLogApprovedEvent::EVENT
              method: onMultipleSpecialLeaveWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleSpecialLeaveWorkLogRejectedEvent::EVENT
              method: onMultipleSpecialLeaveWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleTimeOffWorkLogApprovedEvent::EVENT
              method: onMultipleTimeOffWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleTimeOffWorkLogRejectedEvent::EVENT
              method: onMultipleTimeOffWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleVacationWorkLogApprovedEvent::EVENT
              method: onMultipleVacationWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\MultipleVacationWorkLogRejectedEvent::EVENT
              method: onMultipleVacationWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\OvertimeWorkLogApprovedEvent::EVENT
              method: onOvertimeWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\OvertimeWorkLogCanceledEvent::EVENT
              method: onOvertimeWorkLogCanceled
            - name: kernel.event_listener
              event: !php/const App\Event\OvertimeWorkLogRejectedEvent::EVENT
              method: onOvertimeWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\SpecialLeaveWorkLogApprovedEvent::EVENT
              method: onSpecialLeaveWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\SpecialLeaveWorkLogCanceledEvent::EVENT
              method: onSpecialLeaveWorkLogCanceled
            - name: kernel.event_listener
              event: !php/const App\Event\SpecialLeaveWorkLogRejectedEvent::EVENT
              method: onSpecialLeaveWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\TimeOffWorkLogApprovedEvent::EVENT
              method: onTimeOffWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\TimeOffWorkLogCanceledEvent::EVENT
              method: onTimeOffWorkLogCanceled
            - name: kernel.event_listener
              event: !php/const App\Event\TimeOffWorkLogRejectedEvent::EVENT
              method: onTimeOffWorkLogRejected
            - name: kernel.event_listener
              event: !php/const App\Event\VacationWorkLogApprovedEvent::EVENT
              method: onVacationWorkLogApproved
            - name: kernel.event_listener
              event: !php/const App\Event\VacationWorkLogCanceledEvent::EVENT
              method: onVacationWorkLogCanceled
            - name: kernel.event_listener
              event: !php/const App\Event\VacationWorkLogRejectedEvent::EVENT
              method: onVacationWorkLogRejected

    App\Listener\WorkMonthApprovedEmailNotificationListener:
        class: App\Listener\WorkMonthApprovedEmailNotificationListener
        arguments:
            $mailSenderAddress: '%env(MAILER_EMAIL)%'
        tags:
            - name: kernel.event_listener
              event: !php/const App\Event\WorkMonthApprovedEvent::APPROVED
              method: onApprove

    # Event subscribers

    app.event.subscriber.user_password_subscriber:
        class: App\Subscriber\UserPasswordSubscriber
        autowire: true
        tags:
            - { name: doctrine.event_subscriber }
